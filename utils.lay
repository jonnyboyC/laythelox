import std.io.stdio:{stderr};
import self.token_kind as tk;

let hadErrorState = false;
let hadRunTimeErrorState = false;

export fn hadError() { hadErrorState }
export fn setError(state) { hadErrorState = state; }

export fn hadRuntimeError() { hadRunTimeErrorState }
export fn setRuntimeError(state) { hadRunTimeErrorState = state; }

export fn runtimeError() {
  print("We can't do this yet");
  hadRunTimeErrorState = true;
}

export fn error(token: Token, message: string) {
  if token.kind == tk.EOF {
    report(token.line, " at end", message);
  } else {
    report(token.line, " at '${token.lexeme}'", message);
  }
}

export fn errorRaw(line: number, message: string) {
  report(line, "", message);
}

export fn report(line: number, where: string, message: string) {
  stderr.writeln("[line ${line}] Error${where}: ${message}");
  setError(true);
}