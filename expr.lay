export class Expr {
  accept<R>(visitor: Visitor<R>) -> R {}
}

trait Vistor<R> {
  visitBinaryExpr(expr: Binary) -> R;
  visitGroupingExpr(expr: Grouping) -> R;
  visitLiteralExpr(expr: Literal) -> R;
  visitUnaryExpr(expr: Unary) -> R;
}

export class Binary : Expr {
  init(left: Expr, operator: Token, right: Expr) {
    @left = left;
    @operator = operator;
    @right = right;
  }

  accept<R>(visitor: Visitor<R>) {
    visitor.visit(self)
  }
}

export class Grouping : Expr {
  init(expression: Expr) {
    @expression = expression;
  }

  accept<R>(visitor: Visitor<R>) {
    visitor.visit(self)
  }
}

export class Literal : Expr {
  init(value) {
    @value = value;
  }

  accept<R>(visitor: Visitor<R>) {
    visitor.visit(self)
  }
}

export class Unary : Expr {
  init(operator: Token, right: Token) {
    @operator = operator;
    @right = right;
  }

  accept<R>(visitor: Visitor<R>) {
    visitor.visit(self)
  }
}

