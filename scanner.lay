import self.token_kind as tk;
import self.token:{Token};
import self.utils:{errorRaw};

fn isDigit(c) {
  c >= '0' and c <= '9'
}

fn isAlpha(c) {
  (c >= 'a' and c <= 'z') or
  (c >= 'A' and c <= 'Z') or
  c == '_'
}

fn isAlphaNumeric(c) {
  isAlpha(c) or isDigit(c)
}

let keywords = {
  "and": tk.AND,
  "class": tk.CLASS,
  "else": tk.ELSE,
  "false": tk.FALSE,
  "for": tk.FOR,
  "fun": tk.FUN,
  "if": tk.IF,
  "nil": tk.NIL,
  "or": tk.OR,
  "print": tk.PRINT,
  "return": tk.RETURN,
  "super": tk.SUPER,
  "this": tk.THIS,
  "true": tk.TRUE,
  "var": tk.VAR,
  "while": tk.WHILE,
};

export class Scanner {
  init(source: string) {
    @source = source;
    @tokens = [];
    @start = 0;
    @current = 0;
    @line = 1;
  }

  scanTokens() {
    while !@isAtEnd() {
      @start = @current;
      @scanToken();
    }

    @tokens.push(Token(tk.EOF, '', nil, @line));
    @tokens
  }

  scanToken() {
    let c = @advance();

    if c == '(' {
      @addToken(tk.LEFT_PAREN);
    } else if c == ')' {
      @addToken(tk.RIGHT_PAREN);
    } else if c == '{' {
      @addToken(tk.LEFT_BRACE);
    } else if c == '}' {
      @addToken(tk.RIGHT_BRACE);
    } else if c == ',' {
      @addToken(tk.COMMA);
    } else if c == '.' {
      @addToken(tk.DOT);
    } else if c == '-' {
      @addToken(tk.MINUS);
    } else if c == '+' {
      @addToken(tk.PLUS);
    } else if c == ';' {
      @addToken(tk.SEMICOLON);
    } else if c == '*' {
      @addToken(tk.STAR);
    } else if c == '!' {
      @addToken(@match('=') ? tk.BANG_EQUAL : tk.BANG);
    } else if c == '=' {
      @addToken(@match('=') ? tk.EQUAL_EQUAL : tk.EQUAL);
    } else if c == '<' {
      @addToken(@match('=') ? tk.LESS_EQUAL : tk.LESS);
    } else if c == '>' {
      @addToken(@match('=') ? tk.GREATER_EQUAL : tk.GREATER);
    } else if c == '/' {
      if @match('/') {
        while @peek() != '\n' and !@isAtEnd() {
          @advance();
        }
      } else {
        @addToken(tk.SLASH);
      }
    } else if c == ' ' {
    } else if c == '\r' {
    } else if c == '\t' {
    } else if c == '\t' {
    } else if c == '\n' {
      @line += 1;
    } else if c == '"' {
      @string();
    } else {
      if isDigit(c) {
        @number();
      } else if isAlpha(c) {
        @identifer();
      } else {
        errorRaw(@line, 'Unexpected character.');
      }
    }
  }

  identifer() {
    while isAlphaNumeric(@peek()) {
      @advance();
    }

    let text = @source.slice(@start, @current);
    let kind = keywords.get(text);

    if kind == nil {
      kind = tk.IDENTIFIER;
    }

    @addToken(kind)
  }

  string() {
    while @peek() != '"' and !@isAtEnd() {
      if @peek() == '\n' { @line +=1; }
      @advance();
    }

    if @isAtEnd() {
      errorRaw(@line, 'Unterminated string.');
      return;
    }

    @advance();

    // Trim the surrounding quotes.
    let value = @source.slice(@start + 1, @current - 1);
    @addTokenLiteral(tk.STRING, value);
  }

  number() {
    while isDigit(@peek()) {
      @advance();
    }

    if @peek() == '.' and isDigit(@peekNext()) {
      @advance();

      while isDigit(@peek()) {
        @advance();
      }
    }

    @addTokenLiteral(tk.NUMBER, Number.parse(@source.slice(@start, @current)));
  }

  advance() -> string {
    let c = @source[@current];
    @current += 1;
    c
  }

  peekNext() -> string {
    if @current + 1 >= @source.len() { return '\0'; }
    @source[@current + 1]
  }

  peek() -> string {
    if @isAtEnd() { return '\0'; }
    @source[@current]
  }

  addToken(kind: number) {
    @addTokenLiteral(kind, nil)
  }

  addTokenLiteral(kind: number, literal: any) {
    let text = @source.slice(@start, @current); // substring method
    @tokens.push(Token(kind, text, literal, @line));
  }

  match(expected: string) -> bool {
    if @isAtEnd() { return false; }
    if @source[@current] != expected { return false; }

    @current += 1;
    true
  }

  isAtEnd() -> bool {
    @current >= @source.len()
  }
}